'use client';                                                          // Escribimos "use client" para que sepa que este archivo es de tipo "client" y no de tipo "server", esto es porque estamos usando Next.js y Next.js nos permite crear aplicaciones que se ejecutan tanto en el servidor como en el cliente, por lo que debemos especificarle a TypeScript si este archivo es de tipo "client" o de tipo "server"
import Head from "next/head";
import { useState } from "react";
import { LazyImage } from "@/components/RandomFox";
import { random } from "lodash";
import type { NextPage } from "next";
import type { MouseEventHandler } from "react";
import { PageContent } from "./PageContent";

const myRandom = () => random(1, 123);                                                                  // Función que retorna un numero aleatorio entre 1 y 123
const generateId = (): string => Math.random().toString(36).substring(2) + Date.now().toString(36);     // Función que retorna un string aleatorio, le definimos un tipo de dato de retorno "string"                             

const Home: NextPage = () => {
  const [images, setImages] = useState<Array<IFoxImageItem>>([]);                   // Al useState le damos un Tipado de un array de objetos de tipo "ImageItem" el cual tiene sus propiedades tambien tipadas

  const addNewFox: MouseEventHandler<HTMLButtonElement> = (event) => {              // Indicamos que esta función retorna un tipo de dato "MouseEventHandler<HTMLButtonElement>" que es el tipo de dato que retorna un evento de tipo "click" en un elemento de tipo "button", al hacer hover sobre una propiedad podemos ver en la libreria de TypeScript que tipo de dato retorna esa propiedad y cual necesita. Esta función recibe un parametro "event" que es de tipo "MouseEvent<HTMLButtonElement, MouseEvent>" 

    const newImageItem: IFoxImageItem = {
      id: generateId(),
      url: `https://randomfox.ca/images/${myRandom()}.jpg`,
    };

    setImages([...images, newImageItem]);
  }

  return (
    <div className="bg-gradient-to-r from-red-500 to-amber-500 min-h-screen">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <script 
          defer 
          data-domain="yourdomain.com" 
          src="https://plausible.io/js/script.tagged-events.js"
          onLoad={() => window.plausible && window.plausible("Loaded")}
        ></script>
      </Head>

      <main className="container false h-full mx-auto p-4 flex flex-col items-center  text-center">
      <div className="flex flex-col items-center justify-center">
        <h1 className="text-4xl font-bold p-4 pt-16 ">🦊 Random Foxes with React & TS 🦊</h1>
        <PageContent />
        <button
          onClick={addNewFox}
          className="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full  border-black border-2"
        >
          Add new fox
        </button>
      </div>
      <div className="flex flex-wrap justify-center">
        { images.map(({ id, url }, index) => (                                        // Aplica destructuring al objeto "image" y obtiene las propiedades "id" y "url" esto nos sirve para no tener que escribir "image.id" y "image.url" en cada iteración, usamos map para iterar el array "images" y retornar un componente "RandomFox" por cada elemento del array "images"
            <div key={id} className="p-4">                                      
              <LazyImage 
                src={url}                                                             // Le pasamos la propiedad "url" del objeto "image" al componente "LazyImage", abajo vamos a enviarle todas las propiedades que no definimos en el Type "Props" al componente "LazyImage" usando la sintaxis "{...imgProps}"
                alt={id} 
                title="Random Fox" 
                width={320} 
                className="object-cover h-full p-3 mx-auto rounded-md bg-brown-500 border-black border-2 "
                onClick={() => console.log("Click en la imagen")} 
                onLazyLoad={(img) => console.log(`Imagen #${index + 1} cargada. Nodo:`, img)}
              />    
            </div>
          )) 
        }
      </div>
      </main>

      <footer className="text-center mt-auto p-6 text-sm">
      <p>
        Images from{" "}
        <a href="https://randomfox.ca" target="_blank" rel="noreferrer">
          randomfox.ca
        </a>{" "}
        | Made by{" "}
        <a href="https://www.linkedin.com/in/fernando-orozco-vel/">Fernando Orozco 🇬🇹</a> for{" "}
        <a href="https://twitter.com/platzi">@platzi</a>
        </p>
      </footer>
    </div>
  );
};

export default Home;