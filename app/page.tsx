'use client';                                                          // Escribimos "use client" para que sepa que este archivo es de tipo "client" y no de tipo "server", esto es porque estamos usando Next.js y Next.js nos permite crear aplicaciones que se ejecutan tanto en el servidor como en el cliente, por lo que debemos especificarle a TypeScript si este archivo es de tipo "client" o de tipo "server"
import { useState, useEffect } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { RandomFox } from "@/components/RandomFox";

const random = (): number => Math.floor(Math.random() * 123) + 1;                   // Funci√≥n que retorna un numero aleatorio entre 1 y 123, le definimos un tipo de dato de retorno "number"

// generate simple unique id
const generateId = (): string => Math.random().toString(36).substring(2) + Date.now().toString(36);     // Funci√≥n que retorna un string aleatorio, le definimos un tipo de dato de retorno "string"

type ImageItem = {id: string, url: string};                                         // Defino un Type "ImageItem" que es un objeto que tiene las propiedades "id" y "url" y donde defino el tipo de dato de cada propiedad, si quiero agreagar una propiedad nueva solo la agrego aqu√≠ y ya

const Home: NextPage = () => {
  const [images, setImages] = useState<Array<ImageItem>>([]);                       // Al useState le damos un Tipado de un array de objetos de tipo "ImageItem" el cual tiene sus propiedades tambien tipadas

  useEffect(() => {
    setImages([                                                                     // Agregamos un array de objetos a la variable "images" usando el m√©todo "setImages" que es el m√©todo que nos permite actualizar el estado de la variable "images", este m√©todo recibe como argumento un array de objetos, cada objeto tiene las propiedades "id" y "url" y el valor de la propiedad "url" es un string que contiene la url de una imagen de un zorro aleatoria

      {id: generateId(), url: `https://randomfox.ca/images/${random()}.jpg`},
      {id: generateId(), url: `https://randomfox.ca/images/${random()}.jpg`},
      {id: generateId(), url: `https://randomfox.ca/images/${random()}.jpg`},
    ]);
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="text-3xl font-bold underline">Hey Platzi üòé!</h1>
        { images.map(({ id, url }) => (                                       // Aplica destructuring al objeto "image" y obtiene las propiedades "id" y "url" esto nos sirve para no tener que escribir "image.id" y "image.url" en cada iteraci√≥n, usamos map para iterar el array "images" y retornar un componente "RandomFox" por cada elemento del array "images"
            <div key={id} className="p-4">                                      
              <RandomFox image={url} alt={id}/>    
            </div>
          )) 
        }
      </main>

      <footer></footer>
    </div>
  );
};

export default Home;